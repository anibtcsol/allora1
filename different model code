import torch
import torch.nn as nn
import pandas as pd
import requests
from sklearn.preprocessing import MinMaxScaler
from torch.utils.data import DataLoader, TensorDataset
from torch.optim.lr_scheduler import ReduceLROnPlateau
import joblib

# Define the GRU model with BatchNorm
class GRUModel(nn.Module):
    def __init__(self, input_size, hidden_layer_size, output_size, num_layers, dropout):
        super(GRUModel, self).__init__()
        self.hidden_layer_size = hidden_layer_size
        self.num_layers = num_layers
        self.gru = nn.GRU(input_size, hidden_layer_size, num_layers=num_layers, dropout=dropout, batch_first=True, bidirectional=True)
        self.batch_norm = nn.BatchNorm1d(hidden_layer_size * 2)
        self.linear = nn.Linear(hidden_layer_size * 2, output_size)  # *2 because of bidirectional

    def forward(self, input_seq):
        h_0 = torch.zeros(self.num_layers * 2, input_seq.size(0), self.hidden_layer_size).to(input_seq.device)  # *2 for bidirection
        gru_out, _ = self.gru(input_seq, h_0)
        gru_out = self.batch_norm(gru_out[:, -1])
        predictions = self.linear(gru_out)
        return predictions

# Training process with Gradient Clipping and Early Stopping
def train_model(model, train_loader, val_loader, epochs=100, initial_lr=0.0005, device="cpu"):
    criterion = nn.MSELoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=initial_lr, weight_decay=1e-5)  # L2 Regularization
    scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=10)  # Patience increased
    best_val_loss = float('inf')
    patience, trials = 20, 0  # Early stopping criteria

    model.to(device)

    for epoch in range(epochs):
        model.train()
        epoch_loss = 0
        for seq, label in train_loader:
            seq, label = seq.to(device), label.to(device)
            optimizer.zero_grad()
            y_pred = model(seq)
            loss = criterion(y_pred, label)
            loss.backward()
            torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)  # Gradient Clipping
            optimizer.step()
            epoch_loss += loss.item()

        avg_epoch_loss = epoch_loss / len(train_loader)
        print(f'Epoch {epoch+1}/{epochs}, Loss: {avg_epoch_loss}')

        # Validate and adjust learning rate
        val_loss = validate_model(model, val_loader, criterion, device)
        print(f'Validation Loss: {val_loss}')
        scheduler.step(val_loss)

        # Early Stopping Check
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            trials = 0
            torch.save(model.state_dict(), "best_gru_model.pth")  # Save the best model
        else:
            trials += 1
            if trials >= patience:
                print(f"Early stopping on epoch {epoch+1}")
                break

    print("Training complete. Best model saved as best_gru_model.pth")

# Validation function
def validate_model(model, val_loader, criterion, device):
    model.eval()
    val_loss = 0.0
    with torch.no_grad():
        for seq, label in val_loader:
            seq, label = seq.to(device), label.to(device)
            y_pred = model(seq)
            loss = criterion(y_pred, label)
            val_loss += loss.item()
    return val_loss / len(val_loader)

# If you need to predict after training
def predict(model, seq, scaler, device="cpu"):
    model.eval()
    with torch.no_grad():
        seq = torch.FloatTensor(seq).unsqueeze(0).to(device)
        prediction = model(seq).cpu().numpy()
        return scaler.inverse_transform(prediction)

if __name__ == "__main__":
    # Define the model with GRU
    model = GRUModel(input_size=1, hidden_layer_size=300, output_size=1, num_layers=3, dropout=0.3)

    # Symbols to train on
    symbols = ['BNBUSDT', 'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ARBUSDT']

    # Prepare data
    data, scaler = prepare_dataset(symbols, sequence_length=20)
    train_size = int(0.8 * len(data))
    train_data, val_data = data[:train_size], data[train_size:]
    train_loader = prepare_dataloader(train_data, batch_size=32)
    val_loader = prepare_dataloader(val_data, batch_size=32)

    # Train the model with dynamic learning rate
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    train_model(model, train_loader, val_loader, epochs=100, initial_lr=0.0005, device=device)

    # Save the scaler for future use
    joblib.dump(scaler, "scaler.pkl")
